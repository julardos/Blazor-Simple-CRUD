@page "/customer/create"
@page "/customer/edit/{id:int}"
@using TrustBoxes.Models
@using TrustBoxes.Data
@*@inject HttpClient Http*@
@inject NavigationManager NavigationManager
@inject MasterService masterService
<h3>Customer Form</h3>

<EditForm Model="@customer" OnValidSubmit="CreateCustomer">
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.name" />
        </div>
        <ValidationMessage For="@(() => customer.name)" />
    </div>
    <div class="mb-3">
        <label for="Cellnumber" class="form-label">Phone</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.phone" />
        </div>
        <ValidationMessage For="@(() => customer.phone)" />
    </div>
    <div class="mb-3">
        <label for="Emailid" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.email" />
        </div>
        <ValidationMessage For="@(() => customer.email)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    protected string Title = "Create";
    protected TrustBoxes.Models.Customer customer = new();
    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Title = "Edit";
            customer = await masterService.FindCustomer(id);
        }
    }
    protected async Task CreateCustomer()
    {
        await masterService.CreateCustomer(customer);
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}

